/*! For license information please see mod.js.LICENSE.txt */
(()=>{"use strict";var e={"./src/Alertbox.ts":(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){o.innerHTML=e,document.body.appendChild(o),setTimeout((function(){document.body.removeChild(o)}),5e3)};var o=document.createElement("div");o.style.position="absolute",o.style.top="0",o.style.left="0",o.style.width="30%",o.style.height="5rem",o.style.color="black"},"./src/CommandManager.ts":(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.InitManager=function(){ModAPI.addEventListener("sendchatmessage",(function(e){var t=e.message;if(t.startsWith(".")){e.preventDefault=!0;var o=t.split(" ");".ai"==o[0]&&"start"==o[1]?(r.socket.send("!start"),ModAPI.displayToChat("Starting AI...")):ModAPI.displayToChat("Invalid command!")}}))};var r=o("./src/main.ts")},"./src/main.ts":(e,t,o)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.socket=void 0;var r=o("./src/CommandManager.ts"),s=o("./src/Alertbox.ts");ModAPI.require("player");var n=ModAPI.settings,a=ModAPI.player;(0,r.InitManager)(),t.socket=new WebSocket("ws://congenial-couscous-wr7qpjr599x7fg4rq-8080.app.github.dev",["protocolOne","protocolTwo"]),t.socket.onopen=function(){(0,s.default)("Connected to server!"),console.log("WebSocket connection opened")},t.socket.onmessage=function(e){console.log("Received message:",e.data);var o=e.data.split(" ");if("!out"==o[0])ModAPI.settings[o[1]].pressed=parseInt(o[2]);else if("!getdata"==o[0]){var r={forward:n.keyBindForward.pressed,left:n.keyBindLeft.pressed,right:n.keyBindRight.pressed,back:n.keyBindBack.pressed,jump:n.keyBindJump.pressed,sprint:n.keyBindSprint.pressed,posX:Math.floor(a.posX),posY:Math.floor(a.posY),posZ:Math.floor(a.posZ),yaw:a.rotationYaw,pitch:a.rotationPitch};t.socket.send("!data ".concat(JSON.stringify(r)))}},t.socket.onerror=function(e){(0,s.default)("Error: "+e),console.error("WebSocket error:",e)}}},t={};!function o(r){var s=t[r];if(void 0!==s)return s.exports;var n=t[r]={exports:{}};return e[r](n,n.exports,o),n.exports}("./src/main.ts")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,